AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation AMI-to-Region Map Maker"
Resources:

  # This Role is needed by the Lambda function:
  TheRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "AmiLookup"
      # This Role is assumable by Lambda functions only:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      # This Role allows Lambda functions to execute, and allows us to describe AMIs:        
      ManagedPolicyArns:
        - "arn:aws:iam::011673140073:policy/service-role/AWSLambdaBasicExecutionRole-5a6016af-7217-4cfd-9907-89edc3ac8463"
        - "arn:aws:iam::011673140073:policy/service-role/AWSLambdaAMIExecutionRole-315ec1a2-7ad7-4038-bf9d-81ade6f79ebb"
      # For some reason, I had to allow describe in two places:
      Policies: 
        - 
          PolicyName: "inline"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "ec2:Describe*"
                Resource: "*"

  # Main Lambda Function:
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: "kk-uploads" 
        S3Key: "AmiLookupOMatic.js.zip"
      Description: "sample"
      FunctionName:  "AmiLookupOMatic"
      Handler: "exports.handler"
      MemorySize: 128
      Role: !GetAtt TheRole.Arn
      Runtime: "nodejs4.3"
      Timeout: 15

  # The API Gateway starts here:
  TheRestApi: 
    Type: "AWS::ApiGateway::RestApi"
    Properties: 
      Description: "A test API"
      Name: "AmiMappingTableMaker"

  # The Resources get pretty deep:  /regions/{region}/amis/{ami}/mappings
  RegionResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref TheRestApi
      ParentId: !GetAtt TheRestApi.RootResourceId
      PathPart: "regions"

  RegionValueResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref TheRestApi
      ParentId: !Ref RegionResource
      PathPart: "{region}"

  AmiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref TheRestApi
      ParentId: !Ref RegionValueResource
      PathPart: "amis"

  AmiValueResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref TheRestApi
      ParentId: !Ref AmiResource
      PathPart: "{ami}"

  MappingsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref TheRestApi
      ParentId: !Ref AmiValueResource
      PathPart: "mappings"

  # This controls what happens when you do a GET on /regions/{region}/amis/{ami}/mappings
  # Call the Lambda specified by the insane-looking Uri below:
  GetMethod: 
    Type: "AWS::ApiGateway::Method"
    Properties: 
      RestApiId: !Ref TheRestApi
      ResourceId: !Ref MappingsResource
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      Integration: 
        Type: "AWS"
        Uri:  !Join [ "" , [ "arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt LambdaFunction.Arn, "/invocations" ]]
        IntegrationHttpMethod: "POST"  # MUST use POST to invoke Lambda function!
        PassthroughBehavior: "NEVER"
        RequestTemplates:
          "application/json": "{\"ami\": \"$input.params('ami')\",\"region\": \"$input.params('region')\" }"
        # IntegrationResponses:
        #   - StatusCode: 200
        #     ResponseParameters:  
        #       "integration.response.header.Access-Control-Allow-Origin": "'*'"       

##  TODO: LEFT OFF HERE.  Could not determine how to do CORS via Cloud Formation.  Via web there is
## a big 'enable CORS ' button, but can't determine equivalent CF steps.

  # ...and finally, a "deployment" and "stage" to make the API callable:
  TheDeployment: 
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: [ GetMethod ]
    Properties:
      RestApiId:  !Ref TheRestApi
      StageName: "prod"  # Stage names can't be updated (apparently)

  # TheStage:
  #   Type: "AWS::ApiGateway::Stage"
  #   Properties:
  #     StageName: "Prod"
  #     DeploymentId: !Ref TheDeployment
