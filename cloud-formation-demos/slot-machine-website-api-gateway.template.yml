AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

# See https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/browser-invoke-lambda-function-example.html
# Run this CloudFormation tempate in Oregon.  Other regions will require some code adjustment.
# Access the web application via the Website URL output of your stack.

Parameters:

  WebsiteS3BucketName:
    Description:  The name of the S3 bucket for you website.  Must be globally unique.  
    Type:  String
    Default:  kk-slotmachine-api

  LambdaCodeBucket:
    Type: String
    Default: kk-uploads-oregon
    Description: S3 bucket containing the existing Lambda code.

  LambdaCodeKey:
    Type: String
    Default: slot-machine-website-demo/lambda-slots.js.zip
    Description: key of your Zipped Lamda function code.

Globals:
  Api:
    # Allow cross origin calls to the API Gateway:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:

  # Website bucket.  Pages served from here.  
  WebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub ${WebsiteS3BucketName}
      WebsiteConfiguration:
        IndexDocument: index-apigateway.html


  # This policy allows anyone in the world to make GET requests against the bucket.
  WebsiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref WebsiteS3Bucket
      PolicyDocument: 
        Statement:
          Effect: Allow
          Action: s3:GetObject
          Resource: !Sub ${WebsiteS3Bucket.Arn}/*
          Principal: "*"

  # NodeJS function is fired by API gateway whenever whenever someone pulls the slot machine handle:
  SlotMachineLambda:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: slotpull-api 
      Description: Slot Machine function, fired by API gateway when called from website..
      MemorySize: 128
      Timeout: 4
      Role: !GetAtt RoleSlotMachineLambda.Arn
      Runtime: nodejs10.x
      Handler: lambda-slots.handler
      CodeUri: 
        Bucket: !Ref LambdaCodeBucket
        Key: !Ref LambdaCodeKey
      # Events section defines what triggers the Lambda
      Events:
        # This will define an API Gateway resource that will call our function on a GET to /hello.
        # The SAM stuff will transform this into all of the required API gateway components.
        # Good thing too because they are almost impossible to define using regular cloud formation.
        MyApi:
          Type: Api
          Properties:
            Path: /pull
            Method: GET

  # This Role allows the Lambda function to make API calls if needed.
  RoleSlotMachineLambda:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join ['', [!Ref 'AWS::StackName', "-SlotMachineLambdaRole" ]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the LambdaFunctionRole.
  # Basic permissions for CloudWatch Logs, expand as needed.
  PolicySlotMachineLambda:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Join ['', [!Ref 'AWS::StackName', "-SlotMachineLambdaPolicy" ]]
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:putObject
          Resource: "*"
      Roles: 
        -  !Ref RoleSlotMachineLambda


  # This function will setup the web content in our S3 web bucket
  CustomResourceWebContentLambda:
    Type: AWS::Lambda::Function
    DependsOn: CloudwatchLogsGroupCustomResource
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-WebContentCustomResource
      Description: Populates S3 bucket with web content for our slot machine.
      Role: !GetAtt CustomResourceRole.Arn
      MemorySize: 128     
      Timeout: 15         # Uploads and downloads take a bit of time.
      Runtime: python3.7
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          from zipfile import ZipFile 
          import json
          import os
          import cfnresponse
          import mimetypes
          import boto3
          import urllib.request

          print('Loading function')

          # Entry point:
          def lambda_handler(event, context):
              # print("Received event: " + json.dumps(event, indent=2))

              # Get the CloudFormation request type
              requestType = event['RequestType']
              rp          = event['ResourceProperties']
              region        = rp['region']
              downloadUrl     = rp['downloadUrl']
              apiGatewayUrl     = rp['apiGatewayUrl']
              destinationBucket   = rp['destinationBucket']

              unzip_location  = "/tmp/web"
              responseData = {}
              s3 = boto3.client('s3')

              if requestType == 'Create' or requestType == 'Update':
                try:
                    print ('Downloading... ' )
                    zip_file_name, headers = urllib.request.urlretrieve(downloadUrl)          

                    print ('Unzipping...' )
                    try:
                        with ZipFile(zip_file_name, 'r') as zip: 
                            zip.extractall(unzip_location) 
                    except Exception as e:
                        msg = 'Error extracting {} to {}.  Exception is {}.'.format(zip_file_name,unzip_location,e)
                        print(msg)
                        responseData['Reason'] = msg
                        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                        return

                    html_file_name = "/tmp/web/index-apigateway.html"
                    print('Altering contents of {}...'.format(html_file_name))
                    data = ""
                    # Read the file contents into memory:
                    with open(html_file_name,'r') as f:
                        data = f.read()

                    # Search and replace:
                    print('Altering...')
                    data = data.replace("API_GATEWAY_URL",apiGatewayUrl)
                    data = data.replace("us-west-2",region)

                    # Save
                    print('Saving...')
                    with open(html_file_name,'w') as f:
                        f.write(data)

                    print ('Uploading {} to {}'.format(unzip_location,destinationBucket))
                    for root,dirs,files in os.walk(unzip_location):
                        for file in files:
                            mime_type = mimetypes.guess_type(file)[0]
                            if mime_type is None:
                                mime_type = "binary/octet-stream"
                            prefix = root.replace(unzip_location,"",1)
                            if len(prefix) > 0:
                                prefix = prefix + '/'
                            print("uploading from {} to {}".format(os.path.join(root,file),prefix+file))
                            s3.upload_file(os.path.join(root,file),destinationBucket,prefix + file,ExtraArgs={'ContentType': mime_type})
                    print ('Upload complete.')

                except Exception as e:
                    msg = 'Error occurred while setting up web content.  Exception is {}.'.format(repr(e))
                    print(msg)
                    responseData['Reason'] = msg
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                    return

              if requestType == 'Delete':
                print ('Clean out bucket to enable delete... ' )
                boto3.resource('s3').Bucket(destinationBucket).objects.all().delete()

              # Unless something blew up, we should wander into this code:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

              
  # This Role gives permission to our custom resource Lambda.
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-CustomResourceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole


  # This Policy is attached to the CustomResourceRole.
  # Basic permissions for CloudWatch Logs, plus S3.
  CustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-CustomResourcePolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:Put*
            - s3:List*
            - s3:Delete*
          Resource: "*"
      Roles: 
        -  !Ref CustomResourceRole   

  # This custom resource calls our Lambda function:
  HelperCustomResourceWebContentLambda:
    Type: Custom::helper
    DependsOn: CustomResourcePolicy     # Dont try running the custom resource until the policy is set.
    Properties:
      ServiceToken: !GetAtt CustomResourceWebContentLambda.Arn
      region: !Sub ${AWS::Region}
      apiGatewayUrl: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ServerlessRestApiProdStage}/pull
      destinationBucket: !Ref WebsiteS3Bucket
      downloadUrl:  "https://kk-uploads-oregon.s3-us-west-2.amazonaws.com/slot-machine-website-demo/slotassets.zip"
      #downloadUrl: "https://github.com/awsdocs/aws-doc-sdk-examples/raw/master/javascript/example_code/lambda/tutorial/slotassets.zip"


  # CloudWatch Logs Groups are created automatically once Lambdas write output,
  # but they are easier to cleanup when they are part of the stack.  
  # So make one for each Lambda function:
  CloudwatchLogsGroupSlotMachineApi:
    Type: AWS::Logs::LogGroup
  # DeletionPolicy: Retain  # Great for debugging, but causes trouble in general use when a stack name is reused within 3 days.
    Properties:
      LogGroupName: !Sub /aws/lambda/${SlotMachineLambda}
      RetentionInDays: 3

  CloudwatchLogsGroupCustomResource:
    Type: AWS::Logs::LogGroup
  # DeletionPolicy: Retain  # Great for debugging, but causes trouble in general use when a stack name is reused within 3 days.
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-WebContentCustomResource
      RetentionInDays: 3
 

Outputs:

  WebsiteUrl:
    Description:  URL of the website
    Value: !GetAtt WebsiteS3Bucket.WebsiteURL

  # They don't give you the URL, you have to EARN it.
  # This output depends on the names of the SAM-generated resources.  
  # If they change the generated resource names, this code won't work:
  RestAPIProdStageURL:
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ServerlessRestApiProdStage}/pull
    Description: URL of the Prod Stage of the generated REST API.  This is the thing you call.

  ApiGatewayInManagementConsole:
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ServerlessRestApi}/resources/${ServerlessRestApiProdStage}
    Description: Handy link to the Management Console location where this API can be seen.
