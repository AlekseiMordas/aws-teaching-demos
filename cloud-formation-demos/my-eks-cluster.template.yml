AWSTemplateFormatVersion: 2010-09-09

# Stand up an EKS cluster.  

Parameters:
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC with the subnets you want to use

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select 3 subnets in your selected VPC.

Resources:
  
  #  This role Allows Amazon EKS to manage your clusters on your behalf
  EKSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref 'AWS::StackName', "-EKSServiceRole" ]]
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: eks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  # This security group will be actively modified by the "worker node AWS CloudFormation template".
  # This is why it has no rules of its own when created.
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the EKS Control Plane
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-EKSControlPlaneSecurityGroup" ]]
  
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Join ['', [!Ref "AWS::StackName", "-EKSCluster" ]]
      RoleArn: !GetAtt EKSServiceRole.Arn
      ResourcesVpcConfig: 
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds: !Ref SubnetIds

Outputs:

  CertificateAuthorityData:
    Description: The certificate-authority-data for your cluster.
    Value: !GetAtt  EKSCluster.CertificateAuthorityData

  Endpoint:
    Description: The endpoint for your Kubernetes API server.
    Value: !GetAtt  EKSCluster.Endpoint