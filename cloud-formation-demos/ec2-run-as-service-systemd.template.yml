---
AWSTemplateFormatVersion: '2010-09-09'

# This downloads and runs a Spring Boot app on an EC2 instance as a Linux service, using systemd (modern approach)

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Please supply the following"
        Parameters: 
          - VPC
          - PublicSubnet
          - AmazonLinuxAMI

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC, one with public subnets

  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select a public subnet in your selected VPC.  The web server will run here.

  AmazonLinuxAMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: You probably won't need to change this value.  This is looking up the latest Amazon Linux 2 AMI using the Parameter Store...


Resources:

  # Security Group for the web server.  Allow HTTP and SSH from anywhere:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: WebServerSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  # web server:
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonLinuxAMI                # Latest Amazon Linux 2
      InstanceType: t2.micro                      # Any instance type will do
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: true            # We will need a public IP address
        SubnetId: !Ref PublicSubnet               # We should sit in a public subnet.
        GroupSet: [ !Ref WebServerSecurityGroup ] # Attach the security group
      UserData:      #  This code installs a demo Java/Spring app as a systemd service.  Then it signals completion:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update the OS and get Java
          yum -y update
          yum install wget java-1.8.0 -y
          # Download Java/Spring app:
          wget https://kk-uploads-oregon.s3.amazonaws.com/spring-cloud-aws-environment-demo-1.war
          mv spring-cloud-aws-environment-demo-1.war  app.war
          chmod +x app.war
          # Move app to var folders:
          mkdir /var/app
          mv app.war /var/app
          # Run app as service by creating app.service file:
          echo "[Unit]"                    > app.service
          echo "Description=Spring Boot Demo" >> app.service
          echo ""                                 >> app.service
          echo "[Service]"                            >> app.service
          echo "SuccessExitStatus=143"                    >> app.service
          echo "TimeoutStartSec=30"                           >> app.service
          echo "TimeoutStopSec=10"                                >> app.service
          echo "Restart=on-failure"                                   >> app.service
          echo "RestartSec=5"                                             >> app.service
          echo "ExecStart=/usr/bin/java -jar /var/app/app.war --server.port=80" >> app.service
          echo ""                                                         >> app.service
          echo "[Install]"                                            >> app.service
          echo "WantedBy=multi-user.target"                       >> app.service
          mv app.service /etc/systemd/system/
          # Run Java Spring app as service:
          systemctl daemon-reload
          systemctl enable app.service
          systemctl start app
          /opt/aws/bin/cfn-signal --resource WebServer --stack ${AWS::StackName}  --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT3M
        
# Finally, what we should see when we are all done.  The ELB's DNS name is the URL of our website:
Outputs:
  WebServerIpAddress:
    Description: IP Address of the web server
    Value: !Sub http://${WebServer.PublicIp}
