AWSTemplateFormatVersion: 2010-09-09

# This CloudFormation template deploys a basic VPC / Network.  Specifically:
# It deploys a VPC with 4 subnets (2 public, 2 private) across 2 Availability Zones
# An EC2 instance is used as a NAT; it is easy to turn off temporarily to save $.
# The VPC and subnets are exported for use by other stacks.

Parameters:
  PrivateSubnets:
    Type: String
    AllowedValues: 
    - True
    - False
    Default: True
    Description: Do you want to create private subnets in addition to public subnets?

  NumberOfAZs:
    Type: Number
    AllowedValues: 
    - 1
    - 2
    - 3
    Default: 2
    Description:  How many Availability Zones do you wish to utilize?

Conditions:
  BuildPrivateSubnets:  !Equals [ !Ref PrivateSubnets, True ] 
  BuildPublicB:         !Not [ !Equals [ !Ref NumberOfAZs, 1 ]]  
  BuildPublicC:         !Equals [ !Ref NumberOfAZs, 3 ]  
  BuildPrivateB:        !And [ !Not [ !Equals [ !Ref NumberOfAZs, 1 ]], !Equals [ !Ref PrivateSubnets, True ] ]
  BuildPrivateC:        !And [ !Equals [ !Ref NumberOfAZs, 3 ], !Equals [ !Ref PrivateSubnets, True ] ]

Mappings:
  #  This is just the Amazon Linux AMI:
  AmazonLinuxAMI:
    us-east-1:
      AMI: ami-1853ac65
    us-east-2:
      AMI: ami-25615740
    us-west-1:
      AMI: ami-bf5540df
    us-west-2:
      AMI: ami-d874e0a0
    eu-west-1:
      AMI: ami-3bfab942
    eu-central-1:
      AMI: ami-ac442ac3
    ap-northeast-1:
      AMI: ami-a77c30c1
    ap-southeast-1:
      AMI: ami-e2adf99e
    ap-southeast-2:
      AMI: ami-43874721


Resources:

  # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
        
  # Our VPC will need internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Now some subnets, 2 public and 2 private:
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: Public Subnet A
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: Public Subnet B
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.30.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the third AZ in the list  
      Tags:
      - Key: Name
        Value: Public Subnet C
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: Private Subnet A
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.60.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: Private Subnet B
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.70.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the third AZ in the list  
      Tags:
      - Key: Name
        Value: Private Subnet C
        
  # Some route tables for our subnets:        
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Condition: BuildPrivateSubnets
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance

  
  # Attach the public subnets to public route tables, 
  # and attach the private subnets to private route tables:    
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicB
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicC
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateSubnets
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateB
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateC
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable
      

  # A security group for our NAT.  Ingress from the VPC IPs only.  Egress is TCP & UDP only:
  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: BuildPrivateSubnets
    DependsOn: AttachGateway
    Properties:
      GroupName: !Join [ "", [ "NATSecurityGroup-", !Ref "AWS::StackName" ] ]
      GroupDescription: Enable internal access to the NAT device
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '1024'
        CidrIp: !GetAtt VPC.CidrBlock
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
            
  # Create a NAT instance.  Could use a NAT Gateway instead if you want:    
  NATInstance:
    Type: AWS::EC2::Instance
    Condition: BuildPrivateSubnets
    DependsOn: PublicRoute1                                           # Must have route to IGW established.
    Properties:
      ImageId: !FindInMap [ AmazonLinuxAMI, !Ref "AWS::Region", AMI]  # We lookup the AMI from the Region Map
      InstanceType: t2.small                                          # Any instance type is fine
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !Ref PublicSubnetA                                  # Any public subnet is fine
        AssociatePublicIpAddress: true                                # We will definitely need a public IP address
        GroupSet:
        - Ref: NATSecurityGroup                                       # Plug in the security group
      SourceDestCheck: false                                          # NATs don't work if EC2 tries the match source addresses with destinations.
      Tags:
      - Key: Name
        Value: !Join [ "", [ "NAT-", !Ref "AWS::StackName" ] ]
      UserData:      #  This code is NAT code.  Look at how the last line signals the wait condition:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install -y aws-cfn-bootstrap
          echo 1 > /proc/sys/net/ipv4/ip_forward
          echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
          /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
          /sbin/iptables-save > /etc/sysconfig/iptables
          mkdir -p /etc/sysctl.d/
          cat << NatConfFileMarker > /etc/sysctl.d/nat.conf
          net.ipv4.ip_forward = 1
          net.ipv4.conf.eth0.send_redirects = 0
          NatConfFileMarker
          /opt/aws/bin/cfn-signal -e 0 --resource NATInstance --stack ${AWS::StackName} --region ${AWS::Region}
    # This NATInstance is only complete when you get 1 signal back within 5 minutes'.
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M


Outputs:
  VPC:
    Description: VPC of the base network
    Value: !Ref VPC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", VPC ] ]
  PublicSubnetA:
    Description: First Public Subnet
    Value: !Ref PublicSubnetA
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PublicSubnetA ] ]
  PublicSubnetB:
    Description: Second Public Subnet
    Condition: BuildPublicB
    Value: !Ref PublicSubnetB
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PublicSubnetB ] ]
  PublicSubnetC:
    Description: Third Public Subnet
    Condition: BuildPublicC
    Value: !Ref PublicSubnetC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PublicSubnetC ] ]
  PrivateSubnetA:
    Condition: BuildPrivateSubnets
    Description: First Private Subnet
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PrivateSubnetA ] ]
  PrivateSubnetB:
    Condition: BuildPrivateB
    Description: Second Private Subnet
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PrivateSubnetB ] ]
  PrivateSubnetC:
    Condition: BuildPrivateC
    Description: Second Private Subnet
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PrivateSubnetC ] ]






