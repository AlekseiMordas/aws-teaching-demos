---
AWSTemplateFormatVersion: '2010-09-09'
      
#  This CloudFormation Template provisions a MongoDB server.
#  Specifically, a VPC with a single public subnet with a publicly-available MongoDB server within.
#
#  INSTRUCTIONS:
#  1. Sign into AWS Management Console.  Set region to us-east-1, Virginia.
#  2. Go to CloudFormation.  Create Stack.  Upload this template.
#  3. Name your stack anything. Select if you want the MongoDB or Jenkins instance (or both)
#  4. Double-check the AMI values as these may change in the future.
#  5. Select a keypair from the list and ensure you have the private key.  If list is empty, or if you lost the private key, go to EC2 service and create/download one, then return here.
#  6. Take defaults on all other settings and create.  
#  7. Your mongoDB / Jenkins instances should be ready in a few minutes.  Find the stack outputs to obtain the Public IP addresses.
#  8. When finished, delete this stack; it will clean up all created resources.
#
#  WARNING: This will only run in us-east-1, and running this costs real money, so delete it when done.

Parameters:
  CreateMongoDB:
    Type: String
    AllowedValues: [Yes,No]
    Default: Yes
    Description: Do you want to create a MongoDB Instance or not?
    
  CreateJenkins:
    Type: String
    AllowedValues: [Yes,No]
    Default: Yes
    Description: Do you want to create a Jenkins Instance or not?

  JenkinsAMI:
    Type: String
    Default: ami-4cf7e126
    Description: The AMI can be found be searching for jenkins-continuous-delivery-lab in the EC2 Dashboard. Must be in the N. Virginia region. Make sure you search under Public Images.

  MongoAMI:
    Type: String
    Default: ami-ee2694f8
    Description: The AMI can be found be searching for mongodb-service-broker-lab in the EC2 Dashboard (ami-cdf7f4a7). Must be in the N. Virginia region. Make sure you search under Public Images.

  PrivateKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of the private key file to use for SSH/RDP access to the MongoDB / Jenkins instances.  Create this key in the EC2 area of AWS.

Conditions:
  MakeJenkinsInstance: !Equals [ !Ref CreateJenkins, Yes ]
  MakeMongoInstance: !Equals [ !Ref CreateMongoDB, Yes ]

Resources:
  # First, A VPC.  We could use the default VPC 
  # but who knows what changes people have made on their accounts:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: Mongo VPC
        
  # Our VPC will need internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Now a public subnet.  Any availability zone will do:
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: Public Subnet 1
        
  # A route table plus route to make our public subnet public:        
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      

  # Attach the public subnets to public route table:    
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
      

  # A security group for our MongoDB instance.
  # Ingress via SSH port 22 from anywhere.
  # Ingress via TCP port 27017 from anywhere.
  # WARNING - This is a pretty wide-open security group.
  MongoSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: MakeMongoInstance
    Properties:
      GroupDescription: Enable external access to MongoDB
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 27017
        CidrIp: 0.0.0.0/0

      
  # A security group for our Jenkins instance.
  # Ingress via SSH port 22 from anywhere.
  # Ingress via HTTPS port 443 from anywhere.
  # WARNING - This is a pretty wide-open security group.
  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: MakeJenkinsInstance
    Properties:
      GroupDescription: Enable external access to Jenkins
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0


  # This instance is our MongoDB server
  MongoDBServer:
    Type: AWS::EC2::Instance
    Condition: MakeMongoInstance                # Only create if requested
    DependsOn: PublicSubnet1RouteTableAssociation
    Properties:
      ImageId: !Ref MongoAMI
      InstanceType: t2.large                    # Any size is fine
      KeyName: !Ref PrivateKeyName              # Use the keypair from the input parameters
      NetworkInterfaces:
      - DeviceIndex: '0'
        AssociatePublicIpAddress: 'true'        # We will need a public IP address
        SubnetId: !Ref PublicSubnet1            # We should sit in a public subnet.  Either one is fine.
        GroupSet:
        - Ref: MongoSecurityGroup               # Attach the security group
      Tags:
      - Key: Name
        Value: MongoDBServer


  # This instance is our Jenkins server
  JenkinsServer:
    Type: AWS::EC2::Instance
    Condition: MakeJenkinsInstance              # Only create if requested
    DependsOn: PublicSubnet1RouteTableAssociation
    Properties:
      ImageId: !Ref JenkinsAMI
      InstanceType: t2.large                    # Any size is fine
      KeyName: !Ref PrivateKeyName              # Use the keypair from the input parameters
      NetworkInterfaces:
      - DeviceIndex: '0'
        AssociatePublicIpAddress: 'true'        # We will need a public IP address
        SubnetId: !Ref PublicSubnet1            # We should sit in a public subnet.  Either one is fine.
        GroupSet:
        - Ref: JenkinsSecurityGroup             # Attach the security group
      Tags:
      - Key: Name
        Value: JenkinsServer
      UserData:                                 #  Launch Jenkins on initial launch.
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          service jenkins start
       
# Finally, what we should see when we are all done.  
# The public IP of the MongoDB server is needed for MONGODB_HOST
Outputs:
  JenkinsServerPublicIPAddress:
    Condition: MakeJenkinsInstance
    Description: The public IP address of your Jenkins server.
    Value: !GetAtt JenkinsServer.PublicIp

  MongoDBServerPublicIPAddress:
    Condition: MakeMongoInstance
    Description: The public IP address of your MongoDB server.
    Value: !GetAtt MongoDBServer.PublicIp
