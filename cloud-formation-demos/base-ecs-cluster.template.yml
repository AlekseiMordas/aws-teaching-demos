AWSTemplateFormatVersion: 2010-09-09

# Stand up an ECS and run a container on it.  

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcId
          - PrivateSubnetIds
      - Label: 
          default: "ECS Cluster"
        Parameters: 
          - InstanceType
          - MaxSize
          - DesiredCapacity

Parameters:
  
  MaxSize:
    Type: String
    Default: 1
    Description: Maximum number of ECS instances.

  DesiredCapacity:
    Type: String
    Default: 1
    Description: Desired number of ECS instances.

  InstanceType:
    Type: String
    AllowedValues: 
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge 
    Default: t2.micro
    Description: What kind of instance types in the cluster?

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select 1-2 subnets in your selected VPC, private preferred if NATting is setup.  ECS cluster nodes will run here.

Mappings:
  #  These are variants of the Amazon Linux AMI optimized for ECS, version 1.20 at the moment:
  AmazonLinuxAMI:
    us-east-2:
      AMI: ami-0e65e665ff5f3fc5f
    us-east-1:   
      AMI: ami-112e366e
    us-west-2:   
      AMI: ami-a1f8dfd9
    us-west-1:   
      AMI: ami-dd0de2be
    eu-west-2:   
      AMI: ami-c3ea1fa4
    eu-west-3:   
      AMI: ami-0e4185127a627bbac
    eu-west-1:   
      AMI: ami-0612d1ef7f8e72c06
    eu-central-1:   
      AMI: ami-c7e9e72c
    ap-northeast-2:   
      AMI: ami-02b0706448bd6fb5e
    ap-northeast-1:   
      AMI: ami-256c15c8
    ap-southeast-2:   
      AMI: ami-df49e9bd
    ap-southeast-1:   
      AMI: ami-0e1566e9c8eb85002
    ca-central-1:   
      AMI: ami-cf60edab
    ap-south-1:   
      AMI: ami-0c814df738f3c9fd5
    sa-east-1:   
      AMI: ami-085384d0e5fd5ae0a
    us-gov-west-1:   
      AMI: ami-8b8814ea

Resources:

  # The IAM Role to be used by the EC2 instances in the ECS cluster.
  # Allows your Amazon ECS container agent to register / deregister with load balancer. 
  ECSContainerAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref 'AWS::StackName', "-ECSContainerAgentRole" ]]
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ecs.amazonaws.com
      Policies:
      - PolicyName:  !Join ['', [!Ref 'AWS::StackName', "-ECSContainerAgentPolicy" ]]
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
              - elasticloadbalancing:Register*
              - elasticloadbalancing:Deregister*
              - elasticloadbalancing:Describe*
              - ec2:Describe*
              - ec2:AuthorizeSecurityGroupIngress
            Resource: '*'

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref 'AWS::StackName', "-ClusterAutoscalingRole" ]]
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: application-autoscaling.amazonaws.com
      Path: /
      Policies:
      - PolicyName: !Join ['', [!Ref 'AWS::StackName', "-ClusterAutoscalingPolicy" ]]
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
              - application-autoscaling:*
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
              - ecs:DescribeServices
              - ecs:UpdateService
            Resource: '*'

  # Permissions associated with each ECS Instance.
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref 'AWS::StackName', "-ECSInstanceRole" ]]
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      Policies:
      - PolicyName: !Join ['', [!Ref 'AWS::StackName', "-ECSInstancePolicy" ]]
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:Get*                   # Trying to resolve 'not authorized to perform ecr:GetAuthorizationToken on resource: *' if the task needs to pull from ECR.
              - ecr:*                      # Trying to resolve 'repository xxxxx not found: does not exist or no pull access'.  Not sure which role needs permission to pull from ECR.
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: '*'


  # Now, an ECS Cluster to deploy to:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref 'AWS::StackName', "-ECSCluster" ]]    # Something you can recognize in the console, but unique.


  # Security Group for the ECS instances.  Allow inbound ports for the ELB to use:
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['', [!Ref 'AWS::StackName', "-EcsSecurityGroup" ]]
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId

  #  Inbound rules for HTTP on 80.  31000 - 61000 is for dynamic port assignment in ECS:
  EcsSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0     # This is pretty wide open.  In a real cluster I might restrict the source to a known SG used by the LB
  EcsSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: '31000'
      ToPort: '61000'
      CidrIp: 0.0.0.0/0     # This is pretty wide open.  In a real cluster I might restrict the source to a known SG used by the LB


  # This LogsGroup will be useful when several containers emit output:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [!Ref 'AWS::StackName', "-ECSLogGroup" ]]
      RetentionInDays: 3


  # Auto-Scaling Group for the cluser:
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnetIds
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: 1
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      Tags:
      - Key: Name
        Value: ECS Cluster Node
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M     # 5 minutes
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  # The LaunchConfiguration for the cluster:      
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AmazonLinuxAMI, !Ref 'AWS::Region', AMI]
      SecurityGroups: [!Ref EcsSecurityGroup]
      InstanceType: !Ref InstanceType 
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap  # Install CloudFormation utilities
          yum install -y awslogs            # Install CloudWatch Logs Agent
          yum install -y jq                 # Install JSON Query tool
          # Believe it or not, you have to configure CloudWatch Logs yourself:
          # Inject the CloudWatch Logs configuration file contents
          cat > /etc/awslogs/awslogs.conf <<- EOF
          [general]
          state_file = /var/lib/awslogs/agent-state        
          [/var/log/dmesg]
          file = /var/log/dmesg
          log_group_name = /var/log/dmesg
          log_stream_name = {cluster}/{container_instance_id}
          [/var/log/messages]
          file = /var/log/messages
          log_group_name = /var/log/messages
          log_stream_name = {cluster}/{container_instance_id}
          datetime_format = %b %d %H:%M:%S
          [/var/log/docker]
          file = /var/log/docker
          log_group_name = /var/log/docker
          log_stream_name = {cluster}/{container_instance_id}
          datetime_format = %Y-%m-%dT%H:%M:%S.%f
          [/var/log/ecs/ecs-init.log]
          file = /var/log/ecs/ecs-init.log
          log_group_name = /var/log/ecs/ecs-init.log
          log_stream_name = {cluster}/{container_instance_id}
          datetime_format = %Y-%m-%dT%H:%M:%SZ
          [/var/log/ecs/ecs-agent.log]
          file = /var/log/ecs/ecs-agent.log.*
          log_group_name = /var/log/ecs/ecs-agent.log
          log_stream_name = {cluster}/{container_instance_id}
          datetime_format = %Y-%m-%dT%H:%M:%SZ
          [/var/log/ecs/audit.log]
          file = /var/log/ecs/audit.log.*
          log_group_name = /var/log/ecs/audit.log
          log_stream_name = {cluster}/{container_instance_id}
          datetime_format = %Y-%m-%dT%H:%M:%SZ
          EOF
          sed -i -e "s/{cluster}/$ECS_CLUSTER/g" /etc/awslogs/awslogs.conf
          sed -i -e "s/{container_instance_id}/$CONTAINER_INSTANCE_ID/g" /etc/awslogs/awslogs.conf
          sed -i -e "s/us-east-1/${AWS::Region}/g" /etc/awslogs/awscli.conf
          service awslogs start
          chkconfig awslogs on
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  # TODO - GETTING WARNING ABOUT OUTDATED ECS AGENT.

  # Attach EC2Role's permissions to each ECS Instance.
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref ECSInstanceRole]


Outputs:
  ecscluster:
    Value: !Ref ECSCluster
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ECSCluster ] ]







