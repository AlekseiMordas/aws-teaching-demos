---
AWSTemplateFormatVersion: '2010-09-09'

# Setting up a simple EC2 environment behind a load balancer in which to install
# the CodeDeploy agent plus basic java spring app to upgrade.

# TODO:  Restrict Subnet selection by selected VPC.
# TODO:  Run Spring Boot app as a service, or at least identify a way CodeDeploy can stop it.
# TODO:  Make a CodeDeploy appspec.yml that can stop existing and start new.
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC in which you want to run your demo instances.  Make sure it has public subnets.
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: The subnet in which you want to run your demo instances.  Make sure it is in the selected VPC.  Sorry, I can't restrict this list by the VPC you just selected.
  InstancesKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of the private key file to use for SSH/RDP access.  You shouldn't need to do any SSH access, but just in case.
  DesiredCapacity:
    Type: Number
    MinValue: 1
    MaxValue: 4
    Description: Choose from 1 to 4, the number of web server instances you wish to launch in the auto-scale group.    
      
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Please Enter:"
        Parameters: 
          - VpcId
          - SubnetId
          - InstancesKeyName
          - DesiredCapacity

Mappings:
  #  This is just the Amazon Linux AMI:
  AmazonLinuxAMI:
    us-east-1:
      AMI: ami-1ecae776
    us-west-1:
      AMI: ami-d114f295
    us-west-2:
      AMI: ami-e7527ed7
    eu-west-1:
      AMI: ami-a10897d6
    eu-central-1:
      AMI: ami-a8221fb5
    sa-east-1:
      AMI: ami-b52890a8
    ap-southeast-1:
      AMI: ami-68d8e93a
    ap-southeast-2:
      AMI: ami-fd9cecc7
    ap-northeast-1:
      AMI: ami-cbf90ecb


Resources:

  # Security Group for the web server.  Allow HTTP and SSH from anywhere:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: WebServerSecurityGroup
      - Key: ResourceGroup
        Value: CloudFormationResource
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0


  # Launch Configuration for our web server running within an ASG:            
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ AmazonLinuxAMI, !Ref "AWS::Region", AMI]  # We lookup AMI in the region map
      KeyName: !Ref InstancesKeyName                                  # We get the keypair name from the input parameters
      InstanceType: t2.micro                                          # Any instance type will do
      SecurityGroups:
      - !Ref WebServerSecurityGroup                                   # Plug in the security group.
      BlockDeviceMappings:
      - DeviceName: "/dev/xvdf"
        Ebs:
          VolumeSize: '25'
          VolumeType: gp2
      UserData:      #  This code installs 1) CodeDeploy agent 2) a demo Java/Spring app.  Then it signals completion:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install -y ruby wget 
          cd /home/ec2-user
          wget https://aws-codedeploy-us-west-2.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent start
          wget https://s3.amazonaws.com/kk-uploads/spring-cloud-aws-environment-demo-1.war
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource AppAutoScalingGroup --region ${AWS::Region}
          sudo java -jar spring-cloud-aws-environment-demo-1.war --server.port=80        
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Ref: SubnetId
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 1        # Minimum = 1 & Max = 1 means always keep 1 running :-)
      MaxSize: 4
      DesiredCapacity: !Ref DesiredCapacity       # Parameter at top limits this to max of 4
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LoadBalancerNames: 
      - Ref: AppLoadBalancer
      Tags:
      - Key: Name
        Value: WebServer
        PropagateAtLaunch: 'true'
    # This creation policy is more elegant than the clumsy wait condition shown earlier, but it only works on EC2
    # and ASG/LaunchConfigurtions.  Essentially it says 'this resource is not really created until you get 1 signal back'.
    # Best to make the number of signals match the minimum or desired capacity of the ASG.
    CreationPolicy:
      ResourceSignal:
        Count: !Ref DesiredCapacity
        Timeout: PT5M
        
  # LoadBalancer (classic) is actually quite simple, and ASG handles registering instances with it.        
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      Subnets:
      - Ref: SubnetId
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '10'
        Timeout: '5'
        
# Finally, what we should see when we are all done.  The ELB's DNS name is the URL of our website:
Outputs:
  ELBEndpoint:
    Description: The URL for our Elastic Load Balancer.
    Value: !GetAtt AppLoadBalancer.DNSName
