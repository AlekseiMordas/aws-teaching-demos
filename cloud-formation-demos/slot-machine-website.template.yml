AWSTemplateFormatVersion: 2010-09-09

# See https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/browser-invoke-lambda-function-example.html
# Run this CloudFormation tempate in Oregon.  Other regions will require some code adjustment.
# Download and extract this zip:  https://github.com/awsdocs/aws-doc-sdk-examples/blob/master/javascript/example_code/lambda/tutorial/slotassets.zip
# Edit the index.html file.  Replace the Cognito Identity Pool value with the output of your stack.
# Upload this file and all the other contents of the ZIP to your newly created bucket.
# Access the web application via the Website URL output of your stack.

Parameters:

  S3BucketName:
    Description:  The name of the S3 bucket for you website.  Must be globally unique.  
    Type:  String
    Default:  kk-slotmachine

Resources:

  # Main bucket.  
  MainS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub ${S3BucketName}
      WebsiteConfiguration:
        IndexDocument: index.html


  # This policy allows anyone in the world to make GET requests against the bucket.
  MainS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref MainS3Bucket
      PolicyDocument: 
        Statement:
          Effect: Allow
          Action: s3:GetObject
          Resource: !Sub ${MainS3Bucket.Arn}/*
          Principal: "*"

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub SlotMachine_Pool_${AWS::StackName}
      AllowUnauthenticatedIdentities: true

  # This Role allows the main Lambda function to be invoked:
  # It only needs permissions to write to its own log files
  RoleSlotMachineLambda:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub SlotMachine-LambdaRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # This role is for our custom resource / setup lambda.
  # It needs to write to its own log files.      
  RoleSetupLambda:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub SlotMachine-Setup-LambdaRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

  # This role allows a Cognito Identity Pool - authenticated principal to call our main Lambda.
  # It needs permission to invoke our lambda.
  UnauthenticatedPrincipalRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub SlotMachine-UnauthenticatedPrincipal-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity


  AllowInvokeFunction:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub AllowCognitoUnauthInvokeLambda-${AWS::StackName}
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
            - lambda:InvokeFunction
          Resource: !GetAtt SlotMachineLambda.Arn
      Roles: 
        - !Ref UnauthenticatedPrincipalRole

  # Attach the role to the identity pool:
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles: 
        unauthenticated:
          !GetAtt UnauthenticatedPrincipalRole.Arn
      

  # NodeJS function is fired by JS on web page whenever someone pulls the slot machine handle:
  SlotMachineLambda:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: slotpull
      Description: Slot Machine function, fired by website..
      MemorySize: 128
      Timeout: 4
      Role: !GetAtt RoleSlotMachineLambda.Arn
      Runtime: nodejs8.10
      Handler: index.handler
      Code:
        ZipFile: !Sub |
          /*
            Copyright 2010-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
            This file is licensed under the Apache License, Version 2.0 (the "License").
            You may not use this file except in compliance with the License. A copy of
            the License is located at
              http://aws.amazon.com/apache2.0/
            This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
            CONDITIONS OF ANY KIND, either express or implied. See the License for the
            specific language governing permissions and limitations under the License.
          */
          'use strict';

          var faceCards = [
            { n:'0', card: 'spad_a.png'},
            { n:'1', card: 'spad_k.png'}, 
            { n:'2', card: 'spad_q.png'}, 
            { n:'3', card: 'spad_j.png'}, 
            { n:'4', card: 'hart_a.png'}, 
            { n:'5', card: 'hart_k.png'}, 
            { n:'6', card: 'hart_q.png'}, 
            { n:'7', card: 'hart_j.png'}, 
            { n:'8', card: 'diam_a.png'}, 
            { n:'9', card: 'diam_k.png'}, 
            { n:'10', card: 'diam_q.png'}, 
            { n:'11', card: 'diam_j.png'}, 
            { n:'12', card: 'club_a.png'}, 
            { n:'13', card: 'club_k.png'}, 
            { n:'14', card: 'club_q.png'}, 
            { n:'15', card: 'club_j.png'}
          ];

          exports.handler = (event, context, callback) => {
            // Define the object that will hold the data values returned
            var slotResults = {
              'isWinner' : false,
              'leftWheelImage' : {'file' : {S: ''}},
              'middleWheelImage' : {'file' : {S: ''}},
              'rightWheelImage' : {'file' : {S: ''}}
            };

            // =============================LEFT===========================================
            // set a random number 0-15 for the left slot position
            var slot1 = Math.floor(Math.random()*15).toString();
            slotResults.leftWheelImage.file.S = faceCards[slot1].card;

            var slot2 = Math.floor(Math.random()*15).toString();
            slotResults.middleWheelImage.file.S = faceCards[slot2].card;

            var slot3 = Math.floor(Math.random()*15).toString();
            slotResults.rightWheelImage.file.S = faceCards[slot3].card;

            // if all three values are identical, the spin is a winner
            if ((slot1 === slot2) && (slot2 === slot3)) {
                slotResults.isWinner = true;
            }
            // return the JSON result to the caller of the Lambda function
            callback(null, slotResults);
          };


  # This function will setup the web content in our S3 web bucket
  CustomResourceWebContentLambda:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-WebContentCustomResource
      Description: Populates S3 bucket with web content for our slot machine.
      Role: !GetAtt CustomResourceRole.Arn
      MemorySize: 128     
      Timeout: 15         # Uploads and downloads take a bit of time.
      Runtime: python3.7
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          from zipfile import ZipFile 
          import json
          import os
          import cfnresponse
          import mimetypes
          import boto3
          import urllib.request

          print('Loading function')

          # Entry point:
          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))

              # Get the CloudFormation request type
              requestType = event['RequestType']
              rp          = event['ResourceProperties']
              region        = rp['region']
              downloadUrl     = rp['downloadUrl']
              identityPoolId    = rp['identityPoolId']
              destinationBucket   = rp['destinationBucket']

              unzip_location  = "/tmp/web"
              responseData = {}
              s3 = boto3.client('s3')

              if requestType == 'Create' or requestType == 'Update':
                print ('Downloading... ' )
                try:
                    zip_file_name, headers = urllib.request.urlretrieve(downloadUrl)          
                except Exception as e:
                    msg = 'Error downloading from {}.  Exception is {}.'.format(downloadUrl,e)
                    print(msg)
                    responseData['Reason'] = msg
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)


                print ('Unzipping...' )
                try:
                    with ZipFile(zip_file_name, 'r') as zip: 
                        zip.extractall(unzip_location) 
                except Exception as e:
                    msg = 'Error extracting {} to {}.  Exception is {}.'.format(zip_file_name,unzip_location,e)
                    print(msg)
                    responseData['Reason'] = msg
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)


                html_file_name = "/tmp/web/index.html"
                print('Altering contents of {}...'.format(html_file_name))
                try:
                    data = ""
                    # Read the file contents into memory:
                    with open(html_file_name,'r') as f:
                        data = f.read()

                    # Search and replace:
                    data = data.replace("IDENTITY_POOL_ID",identityPoolId)
                    data = data.replace("us-west-2",region)

                    # Save
                    with open(html_file_name,'w') as f:
                        f.write(data)
                except Exception as e:
                    msg = 'Error altering {}.  Exception is {}.'.format(html_file_name,e)
                    print(msg)
                    responseData['Reason'] = msg
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)


                print ('Uploading {} to {}'.format(unzip_location,destinationBucket))
                try:
                    for root,dirs,files in os.walk(unzip_location):
                        for file in files:
                            mime_type = mimetypes.guess_type(file)[0]
                            if mime_type is None:
                                mime_type = "binary/octet-stream"
                            prefix = root.replace(unzip_location,"",1)
                            if len(prefix) > 0:
                                prefix = prefix + '/'
                            print("uploading from {} to {}".format(os.path.join(root,file),prefix+file))
                            s3.upload_file(os.path.join(root,file),destinationBucket,prefix + file,ExtraArgs={'ContentType': mime_type})

                except Exception as e:
                    msg = 'Error uploading web content into bucket {}. Check region.  Exception is {}.'.format(destinationBucket,repr(e))
                    print(msg)
                    responseData['Reason'] = msg
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                print ('Upload complete.')
              
              # Unless something blew up, we should wander into this code:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

              
  # This Role gives permission to our custom resource Lambda.
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-CustomResourceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole


  # This Policy is attached to the CustomResourceRole.
  # Basic permissions for CloudWatch Logs, plus S3.
  CustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-PollyNotesCustomResourcePolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:Put*
          Resource: "*"
      Roles: 
        -  !Ref CustomResourceRole   

  # This custom resource calls our Lambda function:
  HelperCustomResourceWebContentLambda:
    Type: Custom::helper
    DependsOn: CustomResourcePolicy     # Dont try running the custom resource until the policy is set.
    Properties:
      ServiceToken: !GetAtt CustomResourceWebContentLambda.Arn
      region: !Sub ${AWS::Region}
      identityPoolId: !Ref CognitoIdentityPool
      destinationBucket: !Ref MainS3Bucket
      downloadUrl: "https://github.com/awsdocs/aws-doc-sdk-examples/raw/master/javascript/example_code/lambda/tutorial/slotassets.zip"


Outputs:

  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref CognitoIdentityPool

  WebsiteUrl:
    Description:  URL of the website
    Value: !GetAtt MainS3Bucket.WebsiteURL