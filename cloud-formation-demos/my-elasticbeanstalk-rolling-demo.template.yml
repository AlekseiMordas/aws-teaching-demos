AWSTemplateFormatVersion: 2010-09-09

# This CloudFormation template sets up a demonstration of a Rolling deployment.
# It sets up one four-node ElasticBeanstalk "production" environment with two "versions" of the app.
# The "v1-blue" version is the old version, presently deployed.  "v2-green" is the newer version.
# The environment is configured to roll out updates 2 instances at a time.  Takes about 10 minutes to roll out.

Parameters:

  Prefix:
    Description: Unique prefix of the environment
    Type: String
    Default: kk-rolling

  S3Bucket:
    Description: Bucket containing the existing WAR files.  Must be in same region as this stack.
    Type: String
    Default: kk-uploads-oregon

  S3ObjectBlue:
    Description: Object key (optional prefix) of the existing OLD WAR file in the S3 bucket
    Type: String
    Default: zero-downtime-blue.war

  S3ObjectGreen:
    Description: Object key (optional prefix) of the existing NEW WAR file in the S3 bucket
    Type: String
    Default: zero-downtime-green.war


Resources:

  # This Role is given to the ElasticBeanstalk environment:
  BeanstalkServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join ['', [!Ref 'AWS::StackName', "-BeanstalkServiceRole" ]]  
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: elasticbeanstalk.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the BeanstalkServiceRole.
  BeanstalkServicePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: BeanstalkRollingServicePolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          # I'm not sure exactly what permissions are needed here.  Docs are nearly impossible.
          Action: 
            - elasticbeanstalk:*
            - elasticloadbalancing:Describe*
            - ec2:Describe*
            - ec2:Get*
            - ec2:Associate*
            - logs:*
            - s3:*
            - autoscaling:*   
          Resource: 
            - "*"
      Roles: 
        -  !Ref BeanstalkServiceRole

  # This Role is given to the EC2 instance(s) run by ElasticBeanstalk:
  BeanstalkAppRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join ['', [!Ref 'AWS::StackName', "-BeanstalkAppRole" ]]  
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the BeanstalkAppRole, and eventually the EC2 instances.
  BeanstalkAppPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: BeanstalkRollingAppPolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          # Permission requirements vary from app to app, but everyone needs cloudwatch logs.
          Action: 
            - logs:CreateLogStream
            - logs:GetLogEvents
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutRetentionPolicy
          Resource: 
            - "*"
      Roles: 
        -  !Ref BeanstalkAppRole

  # Beanstalk starts here.
  MyBeanstalkApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: RollingDemo

  BlueVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref MyBeanstalkApplication
      Description: v1-blue
      SourceBundle:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3ObjectBlue

  GreenVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref MyBeanstalkApplication
      Description: v2-green
      SourceBundle:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3ObjectGreen

  # How to run the code:
  EBEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref MyBeanstalkApplication
      VersionLabel: !Ref BlueVersion
      EnvironmentName: Rolling
      CNAMEPrefix: !Ref Prefix
      SolutionStackName: "64bit Amazon Linux 2017.09 v2.7.2 running Tomcat 8 Java 8"
      OptionSettings: 
        - Namespace: aws:elasticbeanstalk:application
          OptionName: "Application Healthcheck URL"
          Value: /health

        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: !Ref BeanstalkServiceRole        # What is the ElasticBeanstalk service allowed to do?
        
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !Ref MyBeanstalkInstanceProfile  # What is my EC2 instance allowed to do?

        - Namespace: aws:autoscaling:asg
          OptionName: MinSize
          Value: 4                                # Hard-code to 4 instances.

        - Namespace: aws:elasticbeanstalk:command   # "command" means rolling update.  "rollingupdate" means config changes.  Ugh.
          OptionName: DeploymentPolicy
          Value: Rolling

        - Namespace: aws:elasticbeanstalk:command   
          OptionName: BatchSizeType
          Value: Percentage

        - Namespace: aws:elasticbeanstalk:command   
          OptionName: BatchSize
          Value: 50                                 # deploy to half of the fleet at a time


  # Attaches the role to the instance:
  MyBeanstalkInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
      - !Ref BeanstalkAppRole 

Outputs:
  ProductionURL:
    Value: !Join ['', ["http://", !GetAtt EBEnvironment.EndpointURL ]] 
