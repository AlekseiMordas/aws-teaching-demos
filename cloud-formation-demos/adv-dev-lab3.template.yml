AWSTemplateFormatVersion: 2010-09-09

# Re-creates lab 5 from Advanced Developer.
# Access the web application via the Website URL output of your stack.
# TODO: HAVE THIS TEMPLATE DOWNLOAD CODE FROM ORIGINAL SOURCE RATHER THAN MY BUCKET
# TODO: WHY IS SNS TO SQS GETTING 403S.
# TODO: SETUP THE IOT STUFF

Parameters:

  S3BucketName:
    Description:  The name of the S3 bucket for you website.  Must be globally unique.  
    Type:  String
    Default:  microservices-lab3-

  InputWebCode:
    Description:  URL of the source web code to be downloaded and adjusted
    Type: String
    Default:  https://kk-courses.s3.amazonaws.com/aws-adv-dev/lab-3.zip

Resources:

  # Queues and Topics:
  DrawQueueFIFO:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub  ${AWS::StackName}_drawqueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
  
  DrawQueueStandard1:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}_drawqueue_1

  DrawQueueStandard2:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}_drawqueue_2

  DrawQueueStandard3:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}_drawqueue_3

  DrawTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}_MessageDuplicator
      Subscription:
        - Endpoint: !GetAtt DrawQueueStandard1.Arn
          Protocol: sqs
        - Endpoint: !GetAtt DrawQueueStandard2.Arn
          Protocol: sqs
        - Endpoint: !GetAtt DrawQueueStandard3.Arn
          Protocol: sqs

  # Kinesis stream, acting like a message queue:
  KinesisStreamDrawingData:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub ${AWS::StackName}_DrawingData
      RetentionPeriodHours: 24
      ShardCount: 1

  # Main S3 bucket.  
  MainS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub ${S3BucketName}
      WebsiteConfiguration:
        IndexDocument: sqs-standard.html

  # This policy allows anyone in the world to make GET requests against the bucket.
  MainS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref MainS3Bucket
      PolicyDocument: 
        Statement:
          Effect: Allow
          Action: s3:GetObject
          Resource: !Sub ${MainS3Bucket.Arn}/*
          Principal: "*"

  # Cognito Pool allows un-authenticated web pages to have identities and assume role:
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ${AWS::StackName}_Identity_Pool
      AllowUnauthenticatedIdentities: true

  # Attach the role to the identity pool:
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles: 
        unauthenticated: !GetAtt UnauthenticatedPrincipalRole.Arn

  UnauthenticatedPrincipalRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}_UnauthenticatedPrincipal
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Path: /
      Policies:
        - PolicyName: StandardCognito
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                Resource:
                  - '*'
        - PolicyName: SNSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:*
                Resource:
                  - !Ref DrawTopic
        - PolicyName: KinesisPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                Resource:
                  - !GetAtt KinesisStreamDrawingData.Arn
        - PolicyName: SQSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource:
                  - !GetAtt DrawQueueStandard1.Arn
                  - !GetAtt DrawQueueStandard2.Arn
                  - !GetAtt DrawQueueStandard3.Arn
                  - !GetAtt DrawQueueFIFO.Arn
        - PolicyName: IoTPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iot:Connect
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - iot:Publish
                  - iot:Receive
                #  TODO TODO TODO  
                Resource:
                  - arn:aws:iot:*:*:topic/microservices/drawingdemo
              - Effect: Allow
                Action:
                  - iot:Subscribe
                #  TODO TODO TODO  
                Resource:
                  - arn:aws:iot:*:*:topicfilter/microservices/drawingdemo


  # This function will setup the web content in our S3 web bucket
  CustomResourceWebContentLambda:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}_WebContentCustomResource
      Description: Populates S3 bucket with web content for our app
      Role: !GetAtt CustomResourceRole.Arn
      MemorySize: 128     
      Timeout: 15         # Uploads and downloads take a bit of time.
      Runtime: python3.7
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          from zipfile import ZipFile 
          import json
          import os
          import cfnresponse
          import mimetypes
          import boto3
          import urllib.request

          print('Loading function')

          # Entry point:
          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))

              # Get the CloudFormation request type
              requestType = event['RequestType']
              rp          = event['ResourceProperties']
              queueUrl1 = rp['queueUrl1']
              queueUrl2   = rp['queueUrl2']
              queueUrl3     = rp['queueUrl3']
              queueUrlFifo    = rp['queueUrlFifo']
              snsTopicArn       = rp['snsTopicArn']
              iotEndpoint         = rp['iotEndpoint']
              downloadUrl           = rp['downloadUrl']
              identityPoolId          = rp['identityPoolId']
              destinationBucket         = rp['destinationBucket']
              kinesisStreamName           = rp['kinesisStreamName']

              unzip_location  = "/tmp"
              upload_location = unzip_location + "/Messaging/"
              responseData = {}
              s3 = boto3.client('s3')

              if requestType == 'Create' or requestType == 'Update':
                try:
                    print ('Downloading... ' )
                    zip_file_name, headers = urllib.request.urlretrieve(downloadUrl)          

                    print ('Unzipping...' )
                    try:
                        with ZipFile(zip_file_name, 'r') as zip: 
                            zip.extractall(unzip_location) 
                    except Exception as e:
                        msg = 'Error extracting {} to {}.  Exception is {}.'.format(zip_file_name,unzip_location,e)
                        print(msg)
                        responseData['Reason'] = msg
                        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                        return

                    config_file_name = upload_location + "scripts/aws-config.js"
                    print('Altering contents of {}...'.format(config_file_name))
                    data = ""
                    # Read the file contents into memory:
                    with open(config_file_name,'r') as f:
                        data = f.read()

                    # Search and replace:
                    data = data.replace("REPLACE_WITH_COGNITO_IDENTITY_POOL_ID",identityPoolId)
                    data = data.replace("REPLACE_WITH_QUEUE_URL_1",queueUrl1)
                    data = data.replace("REPLACE_WITH_QUEUE_URL_2",queueUrl2)
                    data = data.replace("REPLACE_WITH_QUEUE_URL_3",queueUrl3)
                    data = data.replace("REPLACE_WITH_QUEUE_URL_FIFO",queueUrlFifo)
                    data = data.replace("REPLACE_WITH_SNS_TOPIC_ARN",snsTopicArn)
                    data = data.replace("REPLACE_WITH_IOT_ENDPOINT",iotEndpoint)
                    data = data.replace("microservicesDrawingData",kinesisStreamName)

                    # Save
                    with open(config_file_name,'w') as f:
                        f.write(data)

                    print ('Uploading {} to {}'.format(upload_location,destinationBucket))
                    for root,dirs,files in os.walk(upload_location):
                        for file in files:
                            mime_type = mimetypes.guess_type(file)[0]
                            if mime_type is None:
                                mime_type = "binary/octet-stream"
                            prefix = root.replace(upload_location,"",1)
                            if len(prefix) > 0:
                                prefix = prefix + '/'
                            print("uploading from {} to {}".format(os.path.join(root,file),prefix+file))
                            s3.upload_file(os.path.join(root,file),destinationBucket,prefix + file,ExtraArgs={'ContentType': mime_type})
                    print ('Upload complete.')

                except Exception as e:
                    msg = 'Error occurred while setting up web content.  Exception is {}.'.format(repr(e))
                    print(msg)
                    responseData['Reason'] = msg
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                    return

              if requestType == 'Delete':
                print ('Clean out bucket to enable delete... ' )
                boto3.resource('s3').Bucket(destinationBucket).objects.all().delete()

              # Unless something blew up, we should wander into this code:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

              
  # This Role gives permission to our custom resource Lambda.
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}_CustomResourceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole


  # This Policy is attached to the CustomResourceRole.
  # Basic permissions for CloudWatch Logs, plus S3.
  CustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}_CustomResourcePolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:Put*
            - s3:List*
            - s3:Delete*
          Resource: "*"
      Roles: 
        -  !Ref CustomResourceRole   

  # This custom resource calls our Lambda function:
  HelperCustomResourceWebContentLambda:
    Type: Custom::helper
    DependsOn: CustomResourcePolicy     # Dont try running the custom resource until the policy is set.
    Properties:
      ServiceToken: !GetAtt CustomResourceWebContentLambda.Arn
      identityPoolId: !Ref CognitoIdentityPool
      destinationBucket: !Ref MainS3Bucket
      downloadUrl: https://kk-courses.s3.amazonaws.com/aws-adv-dev/lab-3.zip
      queueUrl1: !Ref DrawQueueStandard1
      queueUrl2: !Ref DrawQueueStandard2
      queueUrl3: !Ref DrawQueueStandard3
      queueUrlFifo: !Ref DrawQueueFIFO
      snsTopicArn: !Ref DrawTopic
      iotEndpoint:  TODO TODO TODO
      kinesisStreamName: !Ref KinesisStreamDrawingData


Outputs:

  WebsiteUrl:
    Description:  URL of the website
    Value: !GetAtt MainS3Bucket.WebsiteURL