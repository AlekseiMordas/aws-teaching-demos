AWSTemplateFormatVersion: 2010-09-09

# This template sets up the base network environment expected in AWS Arch lab 3.
# It sets up the VPC, RDS, and anything else expected to be present when your start lab 3.
# Run this before running the arch6-lab3.template.yml

Parameters:
  MultiAz:
    Type: String
    AllowedValues: 
    - True
    - False
    Default: False
    Description: Do you want the RDS DB instance to run in single node mode (false) or multi-AZ mode (true).  False starts faster.

Conditions:
  BuildRdsMultiAZ:  !Equals [ !Ref MultiAz, True ] 

Resources:

  # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: Lab VPC
        
  # Our VPC will need internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Lab IG
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


  # Now some subnets, 1 public and 1 private:
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: Public Subnet A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the SECOND AZ in the list        
      Tags:
      - Key: Name
        Value: Public Subnet B

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/23
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: Private Subnet A

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/23
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the SECOND AZ in the list  
      Tags:
      - Key: Name
        Value: Private Subnet B



  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Route Table
  PublicRoute:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      

  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Route Table
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway     # Defined Below


  # Attach the public subnets to public route tables, 
  # and attach the private subnets to private route tables:    
  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  #  The NAT gateway and it's EIP, locking into a single public subnet for now:
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnetA
      AllocationId: !GetAtt NATGatewayEIP.AllocationId

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # A security group for the RDS instance.  Allow 3306 but only from a limited private IP range (FRAGILE) 
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: Inventory-DB
      GroupDescription: Enable access to MySQL
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Inventory-DB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/20


  # A DBSubnetGroup is not a security group.  It governs where DB Instances may be placed.
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupName: Lab-DB-Subnet-Group
      DBSubnetGroupDescription: Lab-DB-Subnet-Group
      SubnetIds:
      - !Ref PrivateSubnetA
      - !Ref PrivateSubnetB
      Tags:
      - Key: Name
        Value: DBSubnetGroup

  # Our database.  This resource will take the most time to crete.
  RDSDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: inventory
      DBInstanceIdentifier: inventory-db
      AllocatedStorage: 5
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      MasterUsername: master
      MasterUserPassword: lab-password
      MultiAZ: !If [ BuildRdsMultiAZ, true, false ]                 
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups: [!Ref DBSecurityGroup]
      Tags:
      - Key: Name
        Value: inventory-db
  
  
  # EC2 instance will need to talk to SSM to read parameters:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Inventory-App-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ssm:*
                Resource: 'arn:aws:ssm:*:*:parameter/inventory-app/*'

  # Attach EC2Role's permissions to each ECS Instance.
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref InstanceRole]


Outputs:

  Endpoint:
    Value: !GetAtt RDSDatabase.Endpoint.Address
    Description: Database endpoint
    
