---
AWSTemplateFormatVersion: '2010-09-09'

# This demo runs an EC2 instance, installs Docker on it, and runs a container within.   
      
Parameters:
  
  DockerImage:
    Type: String
    Default: kennyk65/spring-cloud-aws-environment-demo
    Description: Image to use for a container.  Can be from DockerHub or include registry URL for a different source (repository-url/image:tag). 

  NetworkStack:
    Type: String
    Default: NetworkStack
    Description: You will need a VPC w/ subnets created by another stack, i.e. base-network-stack.yml


Mappings:
  #  This is just the Amazon Linux AMI:
  AmazonLinuxAMI:
    us-east-1:
      AMI: ami-1ecae776
    us-east-2:
      AMI: ami-15e9c770      
    us-west-1:
      AMI: ami-d114f295
    us-west-2:
      AMI: ami-e7527ed7
    eu-west-1:
      AMI: ami-a10897d6
    eu-central-1:
      AMI: ami-a8221fb5
    sa-east-1:
      AMI: ami-b52890a8
    ap-southeast-1:
      AMI: ami-68d8e93a
    ap-southeast-2:
      AMI: ami-fd9cecc7
    ap-northeast-1:
      AMI: ami-cbf90ecb


Resources:

  # Security Group for the web server.  Allow HTTP from anywhere:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: 
        Fn::ImportValue: !Sub ${NetworkStack}:VPC
      Tags:
      - Key: Name
        Value: WebServerSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
    

  # Launch Configuration for our web server running within an ASG:            
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ AmazonLinuxAMI, !Ref "AWS::Region", AMI]  # We lookup AMI in the region map
      InstanceType: t2.micro          # Any instance type will do
      SecurityGroups:
      - !Ref WebServerSecurityGroup   # Plug in the security group.
      BlockDeviceMappings:
      - DeviceName: "/dev/xvdf"
        Ebs:
          VolumeSize: 25
          VolumeType: gp2
      UserData:      #  This code Installs Docker and runs our image inside:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker
          service docker start
          docker pull ${DockerImage}
          docker run -d -p80:8080 ${DockerImage}   
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource AppAutoScalingGroup --region ${AWS::Region}

  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub ${NetworkStack}:PrivateSubnetA
      - Fn::ImportValue: !Sub ${NetworkStack}:PrivateSubnetB
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 1        
      MaxSize: 4
      DesiredCapacity: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs: 
      - Ref: ALBTargetGroup
      Tags:
      - Key: Name
        Value: WebServer
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M # 5 minutes to yum update, install docker, download the docker image and run it; more than enough.
    UpdatePolicy:   # Just in case you ever want to update it.
      AutoScalingRollingUpdate:
        MaxBatchSize: 2
        MinInstancesInService: 1              # Have CF add one instance of new before removing any old ones.
        MinSuccessfulInstancesPercent: 50     # Requires precision with resource signals that I don't want to mess with right now.
        WaitOnResourceSignals: true           # It takes a few minutes to download and install, so don't shift traffic until ready.
        PauseTime: PT5M                       # We'll wait up to 5 minutes for new instances to get ready.
        
  # LoadBalancer (ALB) with all of its sub-components.  The ASG handles registering instances with it.        
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ALB
      Scheme: internet-facing
      Subnets:
      - Fn::ImportValue: !Sub ${NetworkStack}:PublicSubnetA
      - Fn::ImportValue: !Sub ${NetworkStack}:PublicSubnetB
      SecurityGroups: [!Ref WebServerSecurityGroup]
  # Listen on port 80, pass all traffic to our only TargetGroup:
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref ALB
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
  # The rule is simple; all traffic to "/" goes to our one and only target group:      
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      Priority: 1
  # This TargetGroup is hooked up to the ASG above
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ALBTargetGroup
      VpcId: 
        Fn::ImportValue: !Sub ${NetworkStack}:VPC
      Port: 80
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health        # Spring Boot enables this endpoint.
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2



# Finally, what we should see when we are all done.  The ELB's DNS name is the URL of our website:
Outputs:
  AppAutoScalingGroupName:
    Description: Name of the Auto Scaling group
    Value: !Ref AppAutoScalingGroup
  ELBEndpoint:
    Description: The URL for our Elastic Load Balancer (ALB).
    Value: !Join ['', ["http://", !GetAtt [ALB, DNSName]]]

